// Code generated by MockGen. DO NOT EDIT.
// Source: menu_master.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kokopelli-inc/echo-ddd-demo/internal/domain/entity"
)

// MockMenuMasterRepository is a mock of MenuMasterRepository interface.
type MockMenuMasterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMenuMasterRepositoryMockRecorder
}

// MockMenuMasterRepositoryMockRecorder is the mock recorder for MockMenuMasterRepository.
type MockMenuMasterRepositoryMockRecorder struct {
	mock *MockMenuMasterRepository
}

// NewMockMenuMasterRepository creates a new mock instance.
func NewMockMenuMasterRepository(ctrl *gomock.Controller) *MockMenuMasterRepository {
	mock := &MockMenuMasterRepository{ctrl: ctrl}
	mock.recorder = &MockMenuMasterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuMasterRepository) EXPECT() *MockMenuMasterRepositoryMockRecorder {
	return m.recorder
}

// ListMenuMasters mocks base method.
func (m *MockMenuMasterRepository) ListMenuMasters(ctx context.Context) (entity.ListMenuMasters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMenuMasters", ctx)
	ret0, _ := ret[0].(entity.ListMenuMasters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMenuMasters indicates an expected call of ListMenuMasters.
func (mr *MockMenuMasterRepositoryMockRecorder) ListMenuMasters(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMenuMasters", reflect.TypeOf((*MockMenuMasterRepository)(nil).ListMenuMasters), ctx)
}

// RegisterMenuMaster mocks base method.
func (m *MockMenuMasterRepository) RegisterMenuMaster(ctx context.Context, menuMaster *entity.MenuMaster) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMenuMaster", ctx, menuMaster)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMenuMaster indicates an expected call of RegisterMenuMaster.
func (mr *MockMenuMasterRepositoryMockRecorder) RegisterMenuMaster(ctx, menuMaster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMenuMaster", reflect.TypeOf((*MockMenuMasterRepository)(nil).RegisterMenuMaster), ctx, menuMaster)
}
